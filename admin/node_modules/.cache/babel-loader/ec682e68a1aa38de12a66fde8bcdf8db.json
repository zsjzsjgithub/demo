{"remainingRequest":"/www/admin/node_modules/thread-loader/dist/cjs.js!/www/admin/node_modules/babel-loader/lib/index.js!/www/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/www/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/www/admin/src/views/MessageList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/www/admin/src/views/MessageList.vue","mtime":1565340815000},{"path":"/www/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/www/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.search\";\nimport _Object$assign from \"/www/admin/node_modules/@babel/runtime-corejs2/core-js/object/assign\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'message-list',\n  props: {\n    type: Number\n  },\n  data: function data() {\n    return {\n      list: [],\n      search: {\n        title: '',\n        date: []\n      },\n      page: {\n        total: 0,\n        per_page: 10,\n        current: 1\n      },\n      show: {\n        update: false\n      },\n      isReady: false,\n      form: {\n        id: '',\n        title: '',\n        content: '',\n        type: this.type\n      }\n    };\n  },\n  computed: {\n    params: function params() {\n      var params = _Object$assign({\n        per_page: this.page.per_page,\n        page: this.page.current,\n        type: this.type\n      }, this.search);\n\n      for (var p in params) {\n        if (!params[p]) {\n          delete params[p];\n        }\n      }\n\n      if (params.date) {\n        if (params.date.length === 2) {\n          params.date_start = params.date[0].format();\n          params.date_end = params.date[1].format();\n        }\n\n        delete params.date;\n      }\n\n      return params;\n    },\n    selIds: function selIds() {\n      var ids = [];\n      var sels = this.$refs.table.selection;\n\n      if (sels && sels.length > 0) {\n        sels.forEach(function (s) {\n          ids.push(s.id);\n        });\n      }\n\n      return ids;\n    },\n    hasSel: function hasSel() {\n      return this.isReady && this.selIds.length > 0;\n    }\n  },\n  methods: {\n    getData: function getData(init) {\n      var _this = this;\n\n      if (init === true) {\n        this.page.current = 1;\n      }\n\n      this.$api.get('/messages', {\n        params: this.params\n      }).then(function (data) {\n        if (data) {\n          _this.list = data.data;\n          _this.page.total = Number(data.total);\n        }\n      });\n    },\n    resetForm: function resetForm() {\n      this.form = _Object$assign({}, this.$options.data().form);\n    },\n    submit: function submit() {\n      var _this2 = this;\n\n      if (this.form.id > 0) {\n        this.$api.put(\"/messages/\".concat(this.form.id), this.form).then(function (data) {\n          if (data) {\n            _this2.show.update = false;\n\n            _this2.getData();\n          }\n        });\n      } else {\n        this.$api.post('/messages', this.form).then(function (data) {\n          if (data) {\n            _this2.show.update = false;\n\n            _this2.getData(true);\n          }\n        });\n      }\n    },\n    edit: function edit(row) {\n      var form = {};\n\n      for (var i in this.form) {\n        if (this.form.hasOwnProperty(i) && row.hasOwnProperty(i)) {\n          form[i] = row[i];\n        }\n      }\n\n      this.form = form;\n      this.show.update = true;\n    },\n    del: function del() {\n      var _this3 = this;\n\n      this.$confirm(this.$t('message_del_confirm'), this.$t('del'), {\n        confirmButtonText: this.$t('btnYes'),\n        cancelButtonText: this.$t('btnNo'),\n        type: 'warning'\n      }).then(function () {\n        _this3.$api.delete('/messages', {\n          params: {\n            ids: _this3.selIds\n          }\n        }).then(function (data) {\n          if (data) {\n            _this3.getData();\n\n            _this3.$message.success(_this3.$t('success'));\n          }\n        });\n      }).catch(function () {});\n    }\n  },\n  mounted: function mounted() {\n    this.isReady = true;\n    this.getData();\n  }\n};",{"version":3,"sources":["MessageList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <el-form :inline=\"true\" size=\"mini\" class=\"search\" label-width=\"80px\">\n      <el-form-item :label=\"$t('title')\">\n        <el-input v-model=\"search.title\" clearable></el-input>\n      </el-form-item>\n      <el-form-item :label=\"$t('date')\">\n        <el-date-picker\n            v-model=\"search.date\"\n            type=\"daterange\"\n            :start-placeholder=\"$t('time_start')\"\n            :end-placeholder=\"$t('time_end')\">\n        </el-date-picker>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"getData(true)\" v-t=\"'search'\"></el-button>\n      </el-form-item>\n    </el-form>\n    <div class=\"toolbar\">\n      <el-button-group>\n      <el-button type=\"success\" size=\"small\" @click=\"show.update = true\">+ {{$t('add')}}</el-button>\n      <el-button type=\"danger\" size=\"small\" @click=\"del\" :disabled=\"!hasSel\" v-t=\"'del'\"></el-button>\n      </el-button-group>\n    </div>\n    <el-table\n        :data=\"list\"\n        ref=\"table\"\n        border\n        size=\"mini\"\n        row-key=\"id\">\n      <el-table-column type=\"selection\"></el-table-column>\n      <el-table-column prop=\"id\" label=\"#\"></el-table-column>\n      <el-table-column :label=\"$t('author')\">\n        <span slot-scope=\"{row}\">{{row.author ? row.author.nickname : ''}}</span>\n      </el-table-column>\n      <el-table-column :label=\"$t('title')\" min-width=\"700\">\n        <span class=\"a\" slot-scope=\"{row}\" @click=\"edit(row)\">{{row.title}}</span>\n      </el-table-column>\n      <el-table-column prop=\"created_at\" :label=\"$t('time')\" min-width=\"180\"></el-table-column>\n      <el-table-column prop=\"pageviews\" :label=\"$t('pageviews')\"></el-table-column>\n    </el-table>\n    <el-pagination\n        class=\"page\"\n        :total=\"page.total\"\n        :page-size.sync=\"page.per_page\"\n        :current-page.sync=\"page.current\"\n        layout=\"->,total,sizes,prev,pager,next,jumper\"\n        :page-sizes=\"[10,20,30,40,50,100,500]\"\n        @size-change=\"getData\"\n        @current-change=\"getData\"\n    ></el-pagination>\n    <el-dialog :title=\"!!form.id ? $t('edit') : $t('add')\" :visible.sync=\"show.update\" width=\"800px\" @closed=\"resetForm\">\n      <el-form label-width=\"80px\" @submit.native.prevent>\n        <el-form-item :label=\"$t('title')\">\n          <el-input v-model=\"form.title\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('content')\">\n        <el-input v-model=\"form.content\" type=\"textarea\" :autosize=\"{minRows: 10}\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"show.update = false\" v-t=\"'btnNo'\"></el-button>\n        <el-button type=\"primary\" v-t=\"'btnYes'\" @click=\"submit\"></el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'message-list',\n    props: {\n      type: Number\n    },\n    data() {\n      return {\n        list: [],\n        search: {\n          title: '',\n          date: []\n        },\n        page: {\n          total: 0,\n          per_page: 10,\n          current: 1\n        },\n        show: {\n          update: false\n        },\n        isReady: false,\n        form: {\n          id: '',\n          title: '',\n          content: '',\n          type: this.type\n        }\n      }\n    },\n    computed: {\n      params() {\n        let params = Object.assign({\n          per_page: this.page.per_page,\n          page: this.page.current,\n          type: this.type\n        }, this.search)\n\n        for (let p in params) {\n          if (!params[p]) {\n            delete params[p]\n          }\n        }\n\n        if (params.date) {\n          if (params.date.length === 2) {\n            params.date_start = params.date[0].format()\n            params.date_end = params.date[1].format()\n          }\n          delete params.date\n        }\n\n        return params\n      },\n      selIds() {\n        let ids = []\n        let sels = this.$refs.table.selection\n        if (sels && sels.length > 0) {\n          sels.forEach(s => {\n            ids.push(s.id)\n          })\n        }\n        return ids\n      },\n      hasSel() {\n        return this.isReady && this.selIds.length > 0\n      }\n    },\n    methods: {\n      getData(init) {\n        if (init === true) {\n          this.page.current = 1\n        }\n\n        this.$api.get('/messages', {params: this.params}).then(data => {\n          if (data) {\n            this.list = data.data\n            this.page.total = Number(data.total)\n          }\n        })\n      },\n      resetForm() {\n        this.form = Object.assign({}, this.$options.data().form)\n      },\n      submit() {\n        if (this.form.id > 0) {\n          this.$api.put(`/messages/${this.form.id}`, this.form).then(data => {\n            if (data) {\n              this.show.update = false\n              this.getData()\n            }\n          })\n        } else {\n          this.$api.post('/messages', this.form).then(data => {\n            if (data) {\n              this.show.update = false\n              this.getData(true)\n            }\n          })\n        }\n      },\n      edit(row) {\n        let form = {}\n        for (let i in this.form) {\n          if (this.form.hasOwnProperty(i) && row.hasOwnProperty(i)) {\n            form[i] = row[i]\n          }\n        }\n        this.form = form\n        this.show.update = true\n      },\n      del() {\n        this.$confirm(this.$t('message_del_confirm'), this.$t('del'), {\n          confirmButtonText: this.$t('btnYes'),\n          cancelButtonText: this.$t('btnNo'),\n          type: 'warning'\n        }).then(() => {\n          this.$api.delete('/messages', {params: {ids: this.selIds}}).then(data => {\n            if (data) {\n              this.getData()\n              this.$message.success(this.$t('success'))\n            }\n          })\n        }).catch(() => {})\n      },\n    },\n    mounted() {\n      this.isReady = true\n      this.getData()\n    }\n  }\n</script>\n"],"sourceRoot":"src/views"}]}