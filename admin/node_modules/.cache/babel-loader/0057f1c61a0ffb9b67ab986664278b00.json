{"remainingRequest":"/www/admin/node_modules/thread-loader/dist/cjs.js!/www/admin/node_modules/babel-loader/lib/index.js!/www/admin/src/axios.js","dependencies":[{"path":"/www/admin/src/axios.js","mtime":1565340815000},{"path":"/www/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"/www/admin/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _JSON$stringify from \"/www/admin/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport \"core-js/modules/es7.array.includes\";\nimport api from 'axios';\nimport store from './store';\nimport router from './router';\nimport { Loading, Message } from 'element-ui';\napi.defaults.baseURL = process.env.VUE_APP_API_HOST;\nvar isRefreshing = false; // 是否正在刷新token，标记以避免重复刷新\n\nvar requests = []; // 需要刷新token的请求列表\n\nvar loading;\nvar noLoading = [// 不显示loading的请求\n'/tokens', '/tokens/info'];\napi.interceptors.request.use(function (config) {\n  config.headers['Accept-Language'] = store.state.lang;\n\n  if (!noLoading.includes(config.url)) {\n    loading = Loading.service({\n      fullscreen: true,\n      lock: true\n    });\n  }\n\n  var token = store.state.token;\n\n  if (token) {\n    var now = new Date().getTime() / 1000; // 判断是否需要刷新token\n\n    if (config.url !== '/tokens' && now >= token.expired_at) {\n      // 刷新token，防止多个连接并发\n      if (!isRefreshing) {\n        isRefreshing = true;\n        api.request({\n          url: '/tokens',\n          method: 'put',\n          headers: {\n            Authorization: token.type + ' ' + token.token\n          }\n        }).then(function (res) {\n          var newToken = null;\n\n          if (res) {\n            newToken = {\n              token: res.token,\n              type: res.type,\n              expired_at: res.expired_at,\n              user_type: token.user_type\n            };\n            localStorage.JWT_FXHOS_ADMIN_TOKEN = _JSON$stringify(newToken);\n            store.commit('saveToken', newToken);\n          }\n\n          requests.forEach(function (requestItem) {\n            var resolve = requestItem.resolve,\n                conf = requestItem.conf;\n\n            if (newToken) {\n              conf.headers['Authorization'] = newToken.type + ' ' + newToken.token;\n            }\n\n            resolve(conf);\n          });\n          requests = [];\n          isRefreshing = false;\n        });\n      } // 收集需要刷新token的请求，待token刷新完毕时resolve触发\n\n\n      return new _Promise(function (resolve) {\n        requests.push({\n          resolve: resolve,\n          conf: config\n        });\n      });\n    } // 无需刷新的token直接设置并返回\n\n\n    config.headers['Authorization'] = token.type + ' ' + token.token;\n  }\n\n  return config;\n}, function (error) {\n  loading && loading.close(); // 对请求错误做些什么\n\n  return _Promise.reject(error);\n});\napi.interceptors.response.use(function (res) {\n  loading && loading.close();\n  var data = res.data;\n\n  if (data.code !== 200) {\n    if (data.code === 401) {\n      Message.error('登录超时，请重新登录');\n      localStorage.removeItem('JWT_FXHOS_ADMIN_TOKEN');\n      global.location.reload();\n    } else if (data.code === 404) {\n      router.push('/404');\n    } else if (data.code === 422) {\n      for (var key in data.data) {\n        var err = data.data[key];\n        if (typeof err === 'string') Message.error(err);else Message.error(err[0]);\n        break;\n      }\n    } else if (data.code === 500 && typeof data.data === 'string') {\n      Message.error(data.data);\n    } else {\n      Message.error('操作错误！');\n    }\n  } else {\n    loading && loading.close();\n    return data.data || true;\n  }\n});\nexport var http = api;\nexport default {\n  install: function install(Vue) {\n    Vue.api = api;\n    Vue.prototype.$api = api;\n  }\n};",{"version":3,"sources":["/www/admin/src/axios.js"],"names":["api","store","router","Loading","Message","defaults","baseURL","process","env","VUE_APP_API_HOST","isRefreshing","requests","loading","noLoading","interceptors","request","use","config","headers","state","lang","includes","url","service","fullscreen","lock","token","now","Date","getTime","expired_at","method","Authorization","type","then","res","newToken","user_type","localStorage","JWT_FXHOS_ADMIN_TOKEN","commit","forEach","requestItem","resolve","conf","push","error","close","reject","response","data","code","removeItem","global","location","reload","key","err","http","install","Vue","prototype","$api"],"mappings":"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","sourcesContent":["import api from 'axios'\nimport store from './store'\nimport router from './router'\nimport {Loading, Message} from 'element-ui'\n\napi.defaults.baseURL = process.env.VUE_APP_API_HOST\n\nlet isRefreshing = false // 是否正在刷新token，标记以避免重复刷新\nlet requests = [] // 需要刷新token的请求列表\nlet loading\nconst noLoading = [ // 不显示loading的请求\n  '/tokens',\n  '/tokens/info'\n]\napi.interceptors.request.use(config => {\n  config.headers['Accept-Language'] = store.state.lang\n  if (!noLoading.includes(config.url)) {\n    loading = Loading.service({\n      fullscreen: true,\n      lock: true\n    })\n  }\n  let token = store.state.token\n  if (token) {\n    let now = new Date().getTime() / 1000\n\n    // 判断是否需要刷新token\n    if (config.url !== '/tokens' && now >= token.expired_at) {\n      // 刷新token，防止多个连接并发\n      if (!isRefreshing) {\n        isRefreshing = true\n        api.request({\n          url: '/tokens',\n          method: 'put',\n          headers: {Authorization: token.type + ' ' + token.token}\n        }).then(res => {\n          let newToken = null\n          if (res) {\n            newToken = {\n              token: res.token,\n              type: res.type,\n              expired_at: res.expired_at,\n              user_type: token.user_type\n            }\n            localStorage.JWT_FXHOS_ADMIN_TOKEN = JSON.stringify(newToken)\n            store.commit('saveToken', newToken)\n          }\n          requests.forEach(requestItem => {\n            let {resolve, conf} = requestItem\n            if (newToken) {\n              conf.headers['Authorization'] = newToken.type + ' ' + newToken.token\n            }\n            resolve(conf)\n          })\n          requests = []\n          isRefreshing = false\n        })\n      }\n\n      // 收集需要刷新token的请求，待token刷新完毕时resolve触发\n      return new Promise(resolve => {\n        requests.push({resolve, conf: config})\n      })\n    }\n\n    // 无需刷新的token直接设置并返回\n    config.headers['Authorization'] = token.type + ' ' + token.token\n  }\n  return config\n}, error => {\n  loading && loading.close()\n  // 对请求错误做些什么\n  return Promise.reject(error)\n})\n\napi.interceptors.response.use(res => {\n  loading && loading.close()\n  let {data} = res\n  if (data.code !== 200) {\n    if (data.code === 401) {\n      Message.error('登录超时，请重新登录')\n      localStorage.removeItem('JWT_FXHOS_ADMIN_TOKEN')\n      global.location.reload()\n    } else if (data.code === 404) {\n      router.push('/404')\n    } else if (data.code === 422) {\n      for (const key in data.data) {\n        let err = data.data[key]\n        if (typeof err === 'string') Message.error(err)\n        else Message.error(err[0])\n        break\n      }\n    } else if (data.code === 500 && typeof data.data === 'string') {\n      Message.error(data.data)\n    } else {\n      Message.error('操作错误！')\n    }\n  } else {\n    loading && loading.close()\n    return data.data || true\n  }\n})\n\nexport const http = api\n\nexport default {\n  install(Vue) {\n    Vue.api = api\n    Vue.prototype.$api = api\n  }\n}\n"]}]}