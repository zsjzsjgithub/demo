{"remainingRequest":"/www/admin/node_modules/thread-loader/dist/cjs.js!/www/admin/node_modules/babel-loader/lib/index.js!/www/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/www/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/www/admin/src/views/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/www/admin/src/views/Home.vue","mtime":1565340815000},{"path":"/www/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/www/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.search\";\nimport _Object$assign from \"/www/admin/node_modules/@babel/runtime-corejs2/core-js/object/assign\";\nimport _objectSpread from \"/www/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { agents } from '../datas';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'home',\n  data: function data() {\n    return {\n      list: [],\n      chats: [],\n      chat: {\n        id: 0,\n        name: '',\n        content: ''\n      },\n      search: {\n        name: '',\n        agent_id: '',\n        online: false,\n        date: [],\n        logged_date: []\n      },\n      page: {\n        total: 0,\n        per_page: 10,\n        current: 1\n      },\n      page2: {\n        total: 0,\n        per_page: 10,\n        current: 1\n      },\n      amount: 0,\n      amountId: 0,\n      show: {\n        update: false,\n        amount: false,\n        chat: false\n      },\n      isReady: false,\n      check_username: false,\n      agents: [],\n      form: {\n        id: '',\n        nickname: '',\n        username: '',\n        password: '',\n        tel: '',\n        bank_name: '',\n        bank_number: '',\n        agent_id: ''\n      },\n      isFirst: true,\n      orderBy: 'id',\n      orderType: 'desc'\n    };\n  },\n  computed: _objectSpread({}, mapState(['mem', 'isAdmin']), {\n    params: function params() {\n      var params = _Object$assign({\n        per_page: this.page.per_page,\n        page: this.page.current\n      }, this.search);\n\n      for (var p in params) {\n        if (!params[p]) {\n          delete params[p];\n        }\n      }\n\n      if (params.date) {\n        if (params.date.length === 2) {\n          if (typeof params.date[0] === 'string') {\n            params.date_start = params.date[0];\n            params.date_end = params.date[1];\n          } else {\n            params.date_start = params.date[0].format();\n            params.date_end = params.date[1].format();\n          }\n        }\n\n        delete params.date;\n      }\n\n      if (params.logged_date) {\n        if (params.logged_date.length === 2) {\n          params.logged_date_start = params.logged_date[0].format();\n          params.logged_date_end = params.logged_date[1].format();\n        }\n\n        delete params.logged_date;\n      } // sort\n\n\n      params.order_by = this.orderBy;\n      params.order_type = this.orderType;\n      return params;\n    },\n    selIds: function selIds() {\n      var ids = [];\n      var sels = this.$refs.table.selection;\n\n      if (sels && sels.length > 0) {\n        sels.forEach(function (s) {\n          ids.push(s.id);\n        });\n      }\n\n      return ids;\n    },\n    hasSel: function hasSel() {\n      return this.isReady && this.selIds.length > 0;\n    }\n  }),\n  methods: {\n    getData: function getData(init) {\n      var _this = this;\n\n      if (init === true) {\n        this.page.current = 1;\n      }\n\n      this.$api.get('/members', {\n        params: this.params\n      }).then(function (data) {\n        if (data) {\n          _this.list = data.data;\n          _this.page.total = Number(data.total);\n        }\n      });\n    },\n    resetForm: function resetForm() {\n      this.check_username = false;\n      this.form = _Object$assign({}, this.$options.data().form);\n    },\n    del: function del() {\n      var _this2 = this;\n\n      this.$confirm(this.$t('member_del_confirm'), this.$t('del'), {\n        confirmButtonText: this.$t('btnYes'),\n        cancelButtonText: this.$t('btnNo'),\n        type: 'warning'\n      }).then(function () {\n        _this2.$api.delete('/members', {\n          params: {\n            ids: _this2.selIds\n          }\n        }).then(function (data) {\n          if (data) {\n            _this2.getData();\n\n            _this2.$message.success(_this2.$t('success'));\n          }\n        });\n      }).catch(function () {});\n    },\n    submit: function submit() {\n      var _this3 = this;\n\n      if (this.form.id > 0) {\n        this.$api.put(\"/members/\".concat(this.form.id), this.form).then(function (data) {\n          if (data) {\n            _this3.show.update = false;\n\n            _this3.getData();\n          }\n        });\n      } else {\n        this.$api.post('/tokens/register', _Object$assign(this.form, {\n          password_confirmation: this.form.password\n        })).then(function (data) {\n          if (data) {\n            _this3.show.update = false;\n\n            _this3.getData(true);\n          }\n        });\n      }\n    },\n    changeAmount: function changeAmount() {\n      var _this4 = this;\n\n      this.$api.put(\"/balances/\".concat(this.amountId), {\n        amount: this.amount\n      }).then(function (data) {\n        if (data) {\n          _this4.show.amount = false;\n\n          _this4.getData(true);\n        }\n      });\n    },\n    edit: function edit(row) {\n      var form = {};\n\n      for (var i in this.form) {\n        if (this.form.hasOwnProperty(i) && row.hasOwnProperty(i)) {\n          form[i] = row[i];\n        }\n      }\n\n      this.form = form;\n      this.show.update = true;\n    },\n    check: function check() {\n      var _this5 = this;\n\n      var params = {\n        username: this.form.username\n      };\n\n      if (this.form.id > 0) {\n        params.id = this.form.id;\n      }\n\n      this.$api.get('/tokens/check', {\n        params: params\n      }).then(function (data) {\n        if (data && data.check) {\n          _this5.check_username = true;\n        }\n      });\n    },\n    toggleEnable: function toggleEnable(_ref) {\n      var _this6 = this;\n\n      var id = _ref.id,\n          is_enabled = _ref.is_enabled;\n      this.$api.patch(\"/members/\".concat(id), {\n        is_enabled: is_enabled\n      }).then(function (data) {\n        if (data) {\n          _this6.getData();\n        }\n      });\n    },\n    exports: function exports() {\n      global.location.href = process.env.VUE_APP_API_HOST + '/members/export?token=' + this.$store.state.token.token;\n    },\n    clearChat: function clearChat() {\n      this.chat = {\n        id: 0,\n        name: '',\n        content: ''\n      };\n      this.chats = [];\n    },\n    getChats: function getChats(init) {\n      var _this7 = this;\n\n      if (init === true) {\n        this.page2.current = 1;\n      }\n\n      var params = {\n        per_page: this.page2.per_page,\n        page: this.page2.current,\n        member_id: this.chat.id\n      };\n      this.$api.get('/chats', {\n        params: params\n      }).then(function (data) {\n        if (data) {\n          _this7.chats = data.data;\n          _this7.page2.total = Number(data.total);\n        }\n      });\n    },\n    openChat: function openChat(row) {\n      this.chat.id = row.id;\n      this.chat.name = row.nickname;\n      this.show.chat = true;\n      this.getChats(true);\n    },\n    chatSend: function chatSend() {\n      var _this8 = this;\n\n      this.$api.post('/chats', {\n        member_id: this.chat.id,\n        content: this.chat.content\n      }).then(function (data) {\n        if (data) {\n          _this8.chat.content = '';\n\n          _this8.getChats(true);\n        }\n      });\n    },\n    sortChange: function sortChange(_ref2) {\n      var prop = _ref2.prop,\n          order = _ref2.order;\n      this.orderBy = prop || 'id';\n      this.orderType = order === 'ascending' ? 'asc' : 'desc';\n      this.getData(true);\n    }\n  },\n  watch: {\n    mem: {\n      handler: function handler(v) {\n        if (v.online !== false || v.date.length === 2) {\n          this.search = _Object$assign(this.$options.data().search, v);\n          this.$store.commit('setMem', {\n            online: false,\n            date: []\n          });\n\n          if (!this.isFirst) {\n            this.getData(true);\n          }\n        }\n\n        if (this.isFirst) {\n          this.getData(true);\n        }\n\n        this.isFirst = false;\n      },\n      immediate: true\n    }\n  },\n  mounted: function mounted() {\n    var _this9 = this;\n\n    this.isReady = true;\n    agents().then(function (data) {\n      if (data) {\n        _this9.agents = data;\n      }\n    });\n  }\n};",{"version":3,"sources":["Home.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <el-form :inline=\"true\" size=\"mini\" class=\"search\" label-width=\"80px\">\n      <el-form-item :label=\"$t('look_online')\" style=\"display: inline;float: right;\">\n        <el-switch v-model=\"search.online\" @change=\"getData(true)\"></el-switch>\n      </el-form-item>\n      <el-form-item :label=\"`${$t('username')}|${$t('nickname')}`\">\n        <el-input v-model=\"search.name\" clearable></el-input>\n      </el-form-item>\n      <el-form-item :label=\"$t('menu_agent')\" v-if=\"isAdmin\">\n        <el-select v-model=\"search.agent_id\" filterable clearable>\n          <el-option\n              v-for=\"a in agents\"\n              :key=\"a.id\"\n              :label=\"`${a.nickname} (${a.username})`\"\n              :value=\"a.id\">\n          </el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item :label=\"$t('time_reg')\">\n        <el-date-picker\n            v-model=\"search.date\"\n            type=\"daterange\"\n            :start-placeholder=\"$t('time_start')\"\n            :end-placeholder=\"$t('time_end')\">\n        </el-date-picker>\n      </el-form-item>\n      <el-form-item :label=\"$t('time_login')\">\n        <el-date-picker\n            v-model=\"search.logged_date\"\n            type=\"daterange\"\n            :start-placeholder=\"$t('time_start')\"\n            :end-placeholder=\"$t('time_end')\">\n        </el-date-picker>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"getData(true)\" v-t=\"'search'\"></el-button>\n      </el-form-item>\n    </el-form>\n    <div class=\"toolbar\" v-if=\"isAdmin\">\n      <el-button-group>\n        <el-button type=\"success\" size=\"small\" @click=\"show.update = true\">+ {{$t('add')}}</el-button>\n        <el-button type=\"danger\" size=\"small\" @click=\"del\" :disabled=\"!hasSel\" v-t=\"'del'\"></el-button>\n      </el-button-group>\n      <el-button size=\"small\" @click=\"exports\" icon=\"el-icon-download\" style=\"margin-left: 10px;\" v-t=\"'export'\"></el-button>\n    </div>\n    <el-table\n        :data=\"list\"\n        ref=\"table\"\n        border\n        stripe\n        size=\"mini\"\n        row-key=\"id\"\n        :default-sort=\"{prop: 'id', order: 'descending'}\"\n        @sort-change=\"sortChange\">\n      <el-table-column type=\"selection\" v-if=\"isAdmin\"></el-table-column>\n      <el-table-column prop=\"id\" label=\"#\" min-width=\"60\" sortable=\"custom\"></el-table-column>\n      <el-table-column :label=\"$t('username')\" v-if=\"isAdmin\">\n        <span class=\"a\" slot-scope=\"{row}\" @click=\"edit(row)\">{{row.username}}</span>\n      </el-table-column>\n      <el-table-column v-else :label=\"$t('username')\">\n        <member slot-scope=\"{row}\" :data=\"row\"></member>\n      </el-table-column>\n      <el-table-column prop=\"nickname\" :label=\"$t('nickname')\" v-if=\"isAdmin\"></el-table-column>\n      <el-table-column :label=\"$t('menu_agent')\" min-width=\"140\" v-if=\"isAdmin\">\n        <template slot-scope=\"{row}\" v-if=\"!!row.agent\">\n          <agent v-if=\"row.agent.type === 2\" :data=\"row.agent\"></agent>\n          <member v-else :data=\"row.agent\"></member>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('total_deposit')\" min-width=\"100\">\n        <span slot-scope=\"{row}\">{{row.deposit|numFormat}}</span>\n      </el-table-column>\n      <el-table-column :label=\"$t('total_withdrawal')\" min-width=\"100\">\n        <span slot-scope=\"{row}\">{{row.withdrawal|numFormat}}</span>\n      </el-table-column>\n      <el-table-column :label=\"$t('lr')\" min-width=\"100\" sortable=\"custom\" prop=\"profit\">\n        <template slot-scope=\"{row}\">\n          <span style=\"color: #67C23A;\" v-if=\"row.profit >= 0\">{{(row.profit)|numFormat}}</span>\n          <span style=\"color: #ff4949;\" v-else>{{(row.profit)|numFormat}}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('balance')\" min-width=\"100\" sortable=\"custom\" prop=\"balance\">\n        <span slot-scope=\"{row}\">{{row.balance|numFormat}}</span>\n      </el-table-column>\n      <el-table-column prop=\"created_at\" :label=\"$t('time_reg')\" min-width=\"140\" sortable=\"custom\"></el-table-column>\n      <el-table-column prop=\"logged_at\" :label=\"$t('time_login')\" min-width=\"140\" sortable=\"custom\"></el-table-column>\n      <el-table-column :label=\"$t('status')\" min-width=\"140\" v-if=\"isAdmin\">\n        <template slot-scope=\"{row}\">\n          <el-switch\n              v-model=\"row.is_enabled\"\n              active-color=\"#13ce66\"\n              inactive-color=\"#ff4949\"\n              :active-text=\"$t('enable')\"\n              :inactive-text=\"$t('disable')\"\n            @change=\"toggleEnable(row)\">\n          </el-switch>\n        </template>\n      </el-table-column>\n      <el-table-column v-else :label=\"$t('status')\">\n        <span slot-scope=\"{row}\">{{row.is_enabled ? $t('enable'): $t('disable')}}</span>\n      </el-table-column>\n      <el-table-column v-if=\"isAdmin\" :label=\"$t('operate')\" min-width=\"180\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <el-button-group>\n            <el-button type=\"danger\" size=\"mini\" @click=\"() => {amountId = row.id; show.amount = true}\" v-t=\"'change_balance'\"></el-button>\n            <el-button type=\"success\" size=\"mini\" v-t=\"'chat_send'\" @click=\"openChat(row)\"></el-button>\n          </el-button-group>\n        </template>\n      </el-table-column>\n    </el-table>\n    <el-pagination\n        class=\"page\"\n        :total=\"page.total\"\n        :page-size.sync=\"page.per_page\"\n        :current-page.sync=\"page.current\"\n        layout=\"->,total,sizes,prev,pager,next,jumper\"\n        :page-sizes=\"[10,20,30,40,50,100,500]\"\n        @size-change=\"getData\"\n        @current-change=\"getData\"\n    ></el-pagination>\n    <el-dialog  v-if=\"isAdmin\" :title=\"!!form.id ? $t('edit') : $t('add')\" :visible.sync=\"show.update\" width=\"500px\" @closed=\"resetForm\">\n      <el-form label-width=\"80px\" @submit.native.prevent>\n        <el-form-item :label=\"$t('nickname')\">\n          <el-input v-model=\"form.nickname\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('username')\">\n          <el-input v-model=\"form.username\" @change=\"check_username = false\">\n            <span slot=\"append\" v-if=\"check_username\" v-t=\"'successUser'\" class=\"success\"></span>\n            <el-button slot=\"append\" v-else v-t=\"'check'\" @click=\"check\"></el-button>\n          </el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('password')\">\n          <el-input v-model=\"form.password\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('tel')\">\n          <el-input v-model=\"form.tel\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('bank_name')\">\n          <el-input v-model=\"form.bank_name\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('bank_number')\">\n          <el-input v-model=\"form.bank_number\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('agent_name')\">\n          <el-select v-model=\"form.agent_id\" filterable>\n            <el-option\n                v-for=\"a in agents\"\n                :key=\"a.id\"\n                :label=\"`${a.nickname} (${a.username})`\"\n                :value=\"a.id\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"show.update = false\" v-t=\"'btnNo'\"></el-button>\n        <el-button type=\"primary\" v-t=\"'btnYes'\" @click=\"submit\"></el-button>\n      </div>\n    </el-dialog>\n    <el-dialog v-if=\"isAdmin\" :title=\"$t('change_balance')\" :visible.sync=\"show.amount\" width=\"400px\" @closed=\"amount = 0\">\n      <el-input v-model=\"amount\"></el-input>\n      <p style=\"margin-top: 10px;font-size: 12px;color: #F56C6C;\" v-t=\"'change_balance_tips'\"></p>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"show.amount = false\" v-t=\"'btnNo'\"></el-button>\n        <el-button type=\"primary\" v-t=\"'btnYes'\" @click=\"changeAmount\"></el-button>\n      </div>\n    </el-dialog>\n    <el-dialog :title=\"$t('chat_title', [chat.name])\" :visible.sync=\"show.chat\" width=\"600px\" @closed=\"clearChat\">\n      <el-row :gutter=\"12\" style=\"margin-bottom: 20px;\">\n        <el-col :span=\"21\">\n          <el-input size=\"mini\" v-model=\"chat.content\"></el-input>\n        </el-col>\n        <el-col :span=\"3\">\n          <el-button size=\"mini\" type=\"primary\" v-t=\"'chat_btn'\" @click=\"chatSend\"></el-button>\n        </el-col>\n      </el-row>\n      <el-table\n          :data=\"chats\"\n          ref=\"table2\"\n          :show-header=\"false\"\n          size=\"mini\"\n          row-key=\"id\">\n        <el-table-column align=\"right\" width=\"140\">\n          <span slot-scope=\"{row}\" style=\"color: #99a9bf;\">{{row.created_at}}</span>\n        </el-table-column>\n        <el-table-column align=\"right\" width=\"70\">\n          <span slot-scope=\"{row}\" style=\"color: #99a9bf;\">{{row.author.nickname}}</span>\n        </el-table-column>\n        <el-table-column>\n          <template slot-scope=\"{row}\">\n            <el-tag type=\"success\" size=\"mini\" v-if=\"!row.is_read\" v-t=\"'chat_unread'\"></el-tag>\n            {{row.content}}\n          </template>\n        </el-table-column>\n      </el-table>\n      <el-pagination\n          class=\"page\"\n          :total=\"page2.total\"\n          :page-size.sync=\"page2.per_page\"\n          :current-page.sync=\"page2.current\"\n          layout=\"->,prev,pager,next\"\n          :page-sizes=\"[10,20,30,40,50,100,500]\"\n          @size-change=\"getChats\"\n          @current-change=\"getChats\"\n      ></el-pagination>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n  import {agents} from '../datas';\n  import {mapState} from 'vuex'\n\n  export default {\n    name: 'home',\n    data() {\n      return {\n        list: [],\n        chats: [],\n        chat: {\n          id: 0,\n          name: '',\n          content: ''\n        },\n        search: {\n          name: '',\n          agent_id: '',\n          online: false,\n          date: [],\n          logged_date: []\n        },\n        page: {\n          total: 0,\n          per_page: 10,\n          current: 1\n        },\n        page2: {\n          total: 0,\n          per_page: 10,\n          current: 1\n        },\n        amount: 0,\n        amountId: 0,\n        show: {\n          update: false,\n          amount: false,\n          chat: false\n        },\n        isReady: false,\n        check_username: false,\n        agents: [],\n        form: {\n          id: '',\n          nickname: '',\n          username: '',\n          password: '',\n          tel: '',\n          bank_name: '',\n          bank_number: '',\n          agent_id: ''\n        },\n        isFirst: true,\n        orderBy: 'id',\n        orderType: 'desc'\n      }\n    },\n    computed: {\n      ...mapState(['mem', 'isAdmin']),\n      params() {\n        let params = Object.assign({\n          per_page: this.page.per_page,\n          page: this.page.current\n        }, this.search)\n\n        for (let p in params) {\n          if (!params[p]) {\n            delete params[p]\n          }\n        }\n\n        if (params.date) {\n          if (params.date.length === 2) {\n            if (typeof params.date[0] === 'string') {\n              params.date_start = params.date[0]\n              params.date_end = params.date[1]\n            } else {\n              params.date_start = params.date[0].format()\n              params.date_end = params.date[1].format()\n            }\n          }\n          delete params.date\n        }\n\n        if (params.logged_date) {\n          if (params.logged_date.length === 2) {\n            params.logged_date_start = params.logged_date[0].format()\n            params.logged_date_end = params.logged_date[1].format()\n          }\n          delete params.logged_date\n        }\n\n        // sort\n        params.order_by = this.orderBy\n        params.order_type = this.orderType\n\n        return params\n      },\n      selIds() {\n        let ids = []\n        let sels = this.$refs.table.selection\n        if (sels && sels.length > 0) {\n          sels.forEach(s => {\n            ids.push(s.id)\n          })\n        }\n        return ids\n      },\n      hasSel() {\n        return this.isReady && this.selIds.length > 0\n      }\n    },\n    methods: {\n      getData(init) {\n        if (init === true) {\n          this.page.current = 1\n        }\n\n        this.$api.get('/members', {params: this.params}).then(data => {\n          if (data) {\n            this.list = data.data\n            this.page.total = Number(data.total)\n          }\n        })\n      },\n      resetForm() {\n        this.check_username = false\n        this.form = Object.assign({}, this.$options.data().form)\n      },\n      del() {\n        this.$confirm(this.$t('member_del_confirm'), this.$t('del'), {\n          confirmButtonText: this.$t('btnYes'),\n          cancelButtonText: this.$t('btnNo'),\n          type: 'warning'\n        }).then(() => {\n          this.$api.delete('/members', {params: {ids: this.selIds}}).then(data => {\n            if (data) {\n              this.getData()\n              this.$message.success(this.$t('success'))\n            }\n          })\n        }).catch(() => {})\n      },\n      submit() {\n        if (this.form.id > 0) {\n          this.$api.put(`/members/${this.form.id}`, this.form).then(data => {\n            if (data) {\n              this.show.update = false\n              this.getData()\n            }\n          })\n        } else {\n          this.$api.post('/tokens/register', Object.assign(this.form, {password_confirmation: this.form.password})).then(data => {\n            if (data) {\n              this.show.update = false\n              this.getData(true)\n            }\n          })\n        }\n      },\n      changeAmount() {\n        this.$api.put(`/balances/${this.amountId}`, {amount: this.amount}).then(data => {\n          if (data) {\n            this.show.amount = false\n            this.getData(true)\n          }\n        })\n      },\n      edit(row) {\n        let form = {}\n        for (let i in this.form) {\n          if (this.form.hasOwnProperty(i) && row.hasOwnProperty(i)) {\n            form[i] = row[i]\n          }\n        }\n        this.form = form\n        this.show.update = true\n      },\n      check() {\n        let params = {username: this.form.username}\n        if (this.form.id > 0) {\n          params.id = this.form.id\n        }\n\n        this.$api.get('/tokens/check', {params}).then(data => {\n          if (data && data.check) {\n            this.check_username = true\n          }\n        })\n      },\n      toggleEnable({id, is_enabled}) {\n        this.$api.patch(`/members/${id}`, {is_enabled}).then(data => {\n          if (data) {\n            this.getData()\n          }\n        })\n      },\n      exports() {\n        global.location.href = process.env.VUE_APP_API_HOST + '/members/export?token=' + this.$store.state.token.token\n      },\n      clearChat() {\n        this.chat = {\n          id: 0,\n          name: '',\n          content: ''\n        }\n        this.chats = []\n      },\n      getChats(init) {\n        if (init === true) {\n          this.page2.current = 1\n        }\n\n        let params = {\n          per_page: this.page2.per_page,\n          page: this.page2.current,\n          member_id: this.chat.id\n        }\n\n        this.$api.get('/chats', {params}).then(data => {\n          if (data) {\n            this.chats = data.data\n            this.page2.total = Number(data.total)\n          }\n        })\n      },\n      openChat(row) {\n        this.chat.id = row.id\n        this.chat.name = row.nickname\n        this.show.chat = true\n        this.getChats(true)\n      },\n      chatSend() {\n        this.$api.post('/chats', {\n          member_id: this.chat.id,\n          content: this.chat.content\n        }).then(data => {\n          if (data) {\n            this.chat.content = ''\n            this.getChats(true)\n          }\n        })\n      },\n      sortChange({prop, order}) {\n        this.orderBy = prop || 'id'\n        this.orderType = order === 'ascending' ? 'asc' : 'desc';\n        this.getData(true)\n      }\n    },\n    watch: {\n      mem: {\n        handler(v) {\n          if (v.online !== false || v.date.length === 2) {\n            this.search = Object.assign(this.$options.data().search, v)\n            this.$store.commit('setMem', {online: false, date: []})\n            if (!this.isFirst) {\n              this.getData(true)\n            }\n          }\n          if (this.isFirst) {\n            this.getData(true)\n          }\n          this.isFirst = false\n        },\n        immediate: true\n      }\n    },\n    mounted() {\n      this.isReady = true\n      agents().then(data => {\n        if (data) {\n          this.agents = data\n        }\n      })\n    }\n  }\n</script>\n\n"],"sourceRoot":"src/views"}]}