{"remainingRequest":"/www/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/www/admin/src/views/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/www/admin/src/views/Home.vue","mtime":1565340815000},{"path":"/www/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/www/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {agents} from '../datas';\nimport {mapState} from 'vuex'\n\nexport default {\n  name: 'home',\n  data() {\n    return {\n      list: [],\n      chats: [],\n      chat: {\n        id: 0,\n        name: '',\n        content: ''\n      },\n      search: {\n        name: '',\n        agent_id: '',\n        online: false,\n        date: [],\n        logged_date: []\n      },\n      page: {\n        total: 0,\n        per_page: 10,\n        current: 1\n      },\n      page2: {\n        total: 0,\n        per_page: 10,\n        current: 1\n      },\n      amount: 0,\n      amountId: 0,\n      show: {\n        update: false,\n        amount: false,\n        chat: false\n      },\n      isReady: false,\n      check_username: false,\n      agents: [],\n      form: {\n        id: '',\n        nickname: '',\n        username: '',\n        password: '',\n        tel: '',\n        bank_name: '',\n        bank_number: '',\n        agent_id: ''\n      },\n      isFirst: true,\n      orderBy: 'id',\n      orderType: 'desc'\n    }\n  },\n  computed: {\n    ...mapState(['mem', 'isAdmin']),\n    params() {\n      let params = Object.assign({\n        per_page: this.page.per_page,\n        page: this.page.current\n      }, this.search)\n\n      for (let p in params) {\n        if (!params[p]) {\n          delete params[p]\n        }\n      }\n\n      if (params.date) {\n        if (params.date.length === 2) {\n          if (typeof params.date[0] === 'string') {\n            params.date_start = params.date[0]\n            params.date_end = params.date[1]\n          } else {\n            params.date_start = params.date[0].format()\n            params.date_end = params.date[1].format()\n          }\n        }\n        delete params.date\n      }\n\n      if (params.logged_date) {\n        if (params.logged_date.length === 2) {\n          params.logged_date_start = params.logged_date[0].format()\n          params.logged_date_end = params.logged_date[1].format()\n        }\n        delete params.logged_date\n      }\n\n      // sort\n      params.order_by = this.orderBy\n      params.order_type = this.orderType\n\n      return params\n    },\n    selIds() {\n      let ids = []\n      let sels = this.$refs.table.selection\n      if (sels && sels.length > 0) {\n        sels.forEach(s => {\n          ids.push(s.id)\n        })\n      }\n      return ids\n    },\n    hasSel() {\n      return this.isReady && this.selIds.length > 0\n    }\n  },\n  methods: {\n    getData(init) {\n      if (init === true) {\n        this.page.current = 1\n      }\n\n      this.$api.get('/members', {params: this.params}).then(data => {\n        if (data) {\n          this.list = data.data\n          this.page.total = Number(data.total)\n        }\n      })\n    },\n    resetForm() {\n      this.check_username = false\n      this.form = Object.assign({}, this.$options.data().form)\n    },\n    del() {\n      this.$confirm(this.$t('member_del_confirm'), this.$t('del'), {\n        confirmButtonText: this.$t('btnYes'),\n        cancelButtonText: this.$t('btnNo'),\n        type: 'warning'\n      }).then(() => {\n        this.$api.delete('/members', {params: {ids: this.selIds}}).then(data => {\n          if (data) {\n            this.getData()\n            this.$message.success(this.$t('success'))\n          }\n        })\n      }).catch(() => {})\n    },\n    submit() {\n      if (this.form.id > 0) {\n        this.$api.put(`/members/${this.form.id}`, this.form).then(data => {\n          if (data) {\n            this.show.update = false\n            this.getData()\n          }\n        })\n      } else {\n        this.$api.post('/tokens/register', Object.assign(this.form, {password_confirmation: this.form.password})).then(data => {\n          if (data) {\n            this.show.update = false\n            this.getData(true)\n          }\n        })\n      }\n    },\n    changeAmount() {\n      this.$api.put(`/balances/${this.amountId}`, {amount: this.amount}).then(data => {\n        if (data) {\n          this.show.amount = false\n          this.getData(true)\n        }\n      })\n    },\n    edit(row) {\n      let form = {}\n      for (let i in this.form) {\n        if (this.form.hasOwnProperty(i) && row.hasOwnProperty(i)) {\n          form[i] = row[i]\n        }\n      }\n      this.form = form\n      this.show.update = true\n    },\n    check() {\n      let params = {username: this.form.username}\n      if (this.form.id > 0) {\n        params.id = this.form.id\n      }\n\n      this.$api.get('/tokens/check', {params}).then(data => {\n        if (data && data.check) {\n          this.check_username = true\n        }\n      })\n    },\n    toggleEnable({id, is_enabled}) {\n      this.$api.patch(`/members/${id}`, {is_enabled}).then(data => {\n        if (data) {\n          this.getData()\n        }\n      })\n    },\n    exports() {\n      global.location.href = process.env.VUE_APP_API_HOST + '/members/export?token=' + this.$store.state.token.token\n    },\n    clearChat() {\n      this.chat = {\n        id: 0,\n        name: '',\n        content: ''\n      }\n      this.chats = []\n    },\n    getChats(init) {\n      if (init === true) {\n        this.page2.current = 1\n      }\n\n      let params = {\n        per_page: this.page2.per_page,\n        page: this.page2.current,\n        member_id: this.chat.id\n      }\n\n      this.$api.get('/chats', {params}).then(data => {\n        if (data) {\n          this.chats = data.data\n          this.page2.total = Number(data.total)\n        }\n      })\n    },\n    openChat(row) {\n      this.chat.id = row.id\n      this.chat.name = row.nickname\n      this.show.chat = true\n      this.getChats(true)\n    },\n    chatSend() {\n      this.$api.post('/chats', {\n        member_id: this.chat.id,\n        content: this.chat.content\n      }).then(data => {\n        if (data) {\n          this.chat.content = ''\n          this.getChats(true)\n        }\n      })\n    },\n    sortChange({prop, order}) {\n      this.orderBy = prop || 'id'\n      this.orderType = order === 'ascending' ? 'asc' : 'desc';\n      this.getData(true)\n    }\n  },\n  watch: {\n    mem: {\n      handler(v) {\n        if (v.online !== false || v.date.length === 2) {\n          this.search = Object.assign(this.$options.data().search, v)\n          this.$store.commit('setMem', {online: false, date: []})\n          if (!this.isFirst) {\n            this.getData(true)\n          }\n        }\n        if (this.isFirst) {\n          this.getData(true)\n        }\n        this.isFirst = false\n      },\n      immediate: true\n    }\n  },\n  mounted() {\n    this.isReady = true\n    agents().then(data => {\n      if (data) {\n        this.agents = data\n      }\n    })\n  }\n}\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <el-form :inline=\"true\" size=\"mini\" class=\"search\" label-width=\"80px\">\n      <el-form-item :label=\"$t('look_online')\" style=\"display: inline;float: right;\">\n        <el-switch v-model=\"search.online\" @change=\"getData(true)\"></el-switch>\n      </el-form-item>\n      <el-form-item :label=\"`${$t('username')}|${$t('nickname')}`\">\n        <el-input v-model=\"search.name\" clearable></el-input>\n      </el-form-item>\n      <el-form-item :label=\"$t('menu_agent')\" v-if=\"isAdmin\">\n        <el-select v-model=\"search.agent_id\" filterable clearable>\n          <el-option\n              v-for=\"a in agents\"\n              :key=\"a.id\"\n              :label=\"`${a.nickname} (${a.username})`\"\n              :value=\"a.id\">\n          </el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item :label=\"$t('time_reg')\">\n        <el-date-picker\n            v-model=\"search.date\"\n            type=\"daterange\"\n            :start-placeholder=\"$t('time_start')\"\n            :end-placeholder=\"$t('time_end')\">\n        </el-date-picker>\n      </el-form-item>\n      <el-form-item :label=\"$t('time_login')\">\n        <el-date-picker\n            v-model=\"search.logged_date\"\n            type=\"daterange\"\n            :start-placeholder=\"$t('time_start')\"\n            :end-placeholder=\"$t('time_end')\">\n        </el-date-picker>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"getData(true)\" v-t=\"'search'\"></el-button>\n      </el-form-item>\n    </el-form>\n    <div class=\"toolbar\" v-if=\"isAdmin\">\n      <el-button-group>\n        <el-button type=\"success\" size=\"small\" @click=\"show.update = true\">+ {{$t('add')}}</el-button>\n        <el-button type=\"danger\" size=\"small\" @click=\"del\" :disabled=\"!hasSel\" v-t=\"'del'\"></el-button>\n      </el-button-group>\n      <el-button size=\"small\" @click=\"exports\" icon=\"el-icon-download\" style=\"margin-left: 10px;\" v-t=\"'export'\"></el-button>\n    </div>\n    <el-table\n        :data=\"list\"\n        ref=\"table\"\n        border\n        stripe\n        size=\"mini\"\n        row-key=\"id\"\n        :default-sort=\"{prop: 'id', order: 'descending'}\"\n        @sort-change=\"sortChange\">\n      <el-table-column type=\"selection\" v-if=\"isAdmin\"></el-table-column>\n      <el-table-column prop=\"id\" label=\"#\" min-width=\"60\" sortable=\"custom\"></el-table-column>\n      <el-table-column :label=\"$t('username')\" v-if=\"isAdmin\">\n        <span class=\"a\" slot-scope=\"{row}\" @click=\"edit(row)\">{{row.username}}</span>\n      </el-table-column>\n      <el-table-column v-else :label=\"$t('username')\">\n        <member slot-scope=\"{row}\" :data=\"row\"></member>\n      </el-table-column>\n      <el-table-column prop=\"nickname\" :label=\"$t('nickname')\" v-if=\"isAdmin\"></el-table-column>\n      <el-table-column :label=\"$t('menu_agent')\" min-width=\"140\" v-if=\"isAdmin\">\n        <template slot-scope=\"{row}\" v-if=\"!!row.agent\">\n          <agent v-if=\"row.agent.type === 2\" :data=\"row.agent\"></agent>\n          <member v-else :data=\"row.agent\"></member>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('total_deposit')\" min-width=\"100\">\n        <span slot-scope=\"{row}\">{{row.deposit|numFormat}}</span>\n      </el-table-column>\n      <el-table-column :label=\"$t('total_withdrawal')\" min-width=\"100\">\n        <span slot-scope=\"{row}\">{{row.withdrawal|numFormat}}</span>\n      </el-table-column>\n      <el-table-column :label=\"$t('lr')\" min-width=\"100\" sortable=\"custom\" prop=\"profit\">\n        <template slot-scope=\"{row}\">\n          <span style=\"color: #67C23A;\" v-if=\"row.profit >= 0\">{{(row.profit)|numFormat}}</span>\n          <span style=\"color: #ff4949;\" v-else>{{(row.profit)|numFormat}}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('balance')\" min-width=\"100\" sortable=\"custom\" prop=\"balance\">\n        <span slot-scope=\"{row}\">{{row.balance|numFormat}}</span>\n      </el-table-column>\n      <el-table-column prop=\"created_at\" :label=\"$t('time_reg')\" min-width=\"140\" sortable=\"custom\"></el-table-column>\n      <el-table-column prop=\"logged_at\" :label=\"$t('time_login')\" min-width=\"140\" sortable=\"custom\"></el-table-column>\n      <el-table-column :label=\"$t('status')\" min-width=\"140\" v-if=\"isAdmin\">\n        <template slot-scope=\"{row}\">\n          <el-switch\n              v-model=\"row.is_enabled\"\n              active-color=\"#13ce66\"\n              inactive-color=\"#ff4949\"\n              :active-text=\"$t('enable')\"\n              :inactive-text=\"$t('disable')\"\n            @change=\"toggleEnable(row)\">\n          </el-switch>\n        </template>\n      </el-table-column>\n      <el-table-column v-else :label=\"$t('status')\">\n        <span slot-scope=\"{row}\">{{row.is_enabled ? $t('enable'): $t('disable')}}</span>\n      </el-table-column>\n      <el-table-column v-if=\"isAdmin\" :label=\"$t('operate')\" min-width=\"180\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <el-button-group>\n            <el-button type=\"danger\" size=\"mini\" @click=\"() => {amountId = row.id; show.amount = true}\" v-t=\"'change_balance'\"></el-button>\n            <el-button type=\"success\" size=\"mini\" v-t=\"'chat_send'\" @click=\"openChat(row)\"></el-button>\n          </el-button-group>\n        </template>\n      </el-table-column>\n    </el-table>\n    <el-pagination\n        class=\"page\"\n        :total=\"page.total\"\n        :page-size.sync=\"page.per_page\"\n        :current-page.sync=\"page.current\"\n        layout=\"->,total,sizes,prev,pager,next,jumper\"\n        :page-sizes=\"[10,20,30,40,50,100,500]\"\n        @size-change=\"getData\"\n        @current-change=\"getData\"\n    ></el-pagination>\n    <el-dialog  v-if=\"isAdmin\" :title=\"!!form.id ? $t('edit') : $t('add')\" :visible.sync=\"show.update\" width=\"500px\" @closed=\"resetForm\">\n      <el-form label-width=\"80px\" @submit.native.prevent>\n        <el-form-item :label=\"$t('nickname')\">\n          <el-input v-model=\"form.nickname\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('username')\">\n          <el-input v-model=\"form.username\" @change=\"check_username = false\">\n            <span slot=\"append\" v-if=\"check_username\" v-t=\"'successUser'\" class=\"success\"></span>\n            <el-button slot=\"append\" v-else v-t=\"'check'\" @click=\"check\"></el-button>\n          </el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('password')\">\n          <el-input v-model=\"form.password\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('tel')\">\n          <el-input v-model=\"form.tel\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('bank_name')\">\n          <el-input v-model=\"form.bank_name\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('bank_number')\">\n          <el-input v-model=\"form.bank_number\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('agent_name')\">\n          <el-select v-model=\"form.agent_id\" filterable>\n            <el-option\n                v-for=\"a in agents\"\n                :key=\"a.id\"\n                :label=\"`${a.nickname} (${a.username})`\"\n                :value=\"a.id\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"show.update = false\" v-t=\"'btnNo'\"></el-button>\n        <el-button type=\"primary\" v-t=\"'btnYes'\" @click=\"submit\"></el-button>\n      </div>\n    </el-dialog>\n    <el-dialog v-if=\"isAdmin\" :title=\"$t('change_balance')\" :visible.sync=\"show.amount\" width=\"400px\" @closed=\"amount = 0\">\n      <el-input v-model=\"amount\"></el-input>\n      <p style=\"margin-top: 10px;font-size: 12px;color: #F56C6C;\" v-t=\"'change_balance_tips'\"></p>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"show.amount = false\" v-t=\"'btnNo'\"></el-button>\n        <el-button type=\"primary\" v-t=\"'btnYes'\" @click=\"changeAmount\"></el-button>\n      </div>\n    </el-dialog>\n    <el-dialog :title=\"$t('chat_title', [chat.name])\" :visible.sync=\"show.chat\" width=\"600px\" @closed=\"clearChat\">\n      <el-row :gutter=\"12\" style=\"margin-bottom: 20px;\">\n        <el-col :span=\"21\">\n          <el-input size=\"mini\" v-model=\"chat.content\"></el-input>\n        </el-col>\n        <el-col :span=\"3\">\n          <el-button size=\"mini\" type=\"primary\" v-t=\"'chat_btn'\" @click=\"chatSend\"></el-button>\n        </el-col>\n      </el-row>\n      <el-table\n          :data=\"chats\"\n          ref=\"table2\"\n          :show-header=\"false\"\n          size=\"mini\"\n          row-key=\"id\">\n        <el-table-column align=\"right\" width=\"140\">\n          <span slot-scope=\"{row}\" style=\"color: #99a9bf;\">{{row.created_at}}</span>\n        </el-table-column>\n        <el-table-column align=\"right\" width=\"70\">\n          <span slot-scope=\"{row}\" style=\"color: #99a9bf;\">{{row.author.nickname}}</span>\n        </el-table-column>\n        <el-table-column>\n          <template slot-scope=\"{row}\">\n            <el-tag type=\"success\" size=\"mini\" v-if=\"!row.is_read\" v-t=\"'chat_unread'\"></el-tag>\n            {{row.content}}\n          </template>\n        </el-table-column>\n      </el-table>\n      <el-pagination\n          class=\"page\"\n          :total=\"page2.total\"\n          :page-size.sync=\"page2.per_page\"\n          :current-page.sync=\"page2.current\"\n          layout=\"->,prev,pager,next\"\n          :page-sizes=\"[10,20,30,40,50,100,500]\"\n          @size-change=\"getChats\"\n          @current-change=\"getChats\"\n      ></el-pagination>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n  import {agents} from '../datas';\n  import {mapState} from 'vuex'\n\n  export default {\n    name: 'home',\n    data() {\n      return {\n        list: [],\n        chats: [],\n        chat: {\n          id: 0,\n          name: '',\n          content: ''\n        },\n        search: {\n          name: '',\n          agent_id: '',\n          online: false,\n          date: [],\n          logged_date: []\n        },\n        page: {\n          total: 0,\n          per_page: 10,\n          current: 1\n        },\n        page2: {\n          total: 0,\n          per_page: 10,\n          current: 1\n        },\n        amount: 0,\n        amountId: 0,\n        show: {\n          update: false,\n          amount: false,\n          chat: false\n        },\n        isReady: false,\n        check_username: false,\n        agents: [],\n        form: {\n          id: '',\n          nickname: '',\n          username: '',\n          password: '',\n          tel: '',\n          bank_name: '',\n          bank_number: '',\n          agent_id: ''\n        },\n        isFirst: true,\n        orderBy: 'id',\n        orderType: 'desc'\n      }\n    },\n    computed: {\n      ...mapState(['mem', 'isAdmin']),\n      params() {\n        let params = Object.assign({\n          per_page: this.page.per_page,\n          page: this.page.current\n        }, this.search)\n\n        for (let p in params) {\n          if (!params[p]) {\n            delete params[p]\n          }\n        }\n\n        if (params.date) {\n          if (params.date.length === 2) {\n            if (typeof params.date[0] === 'string') {\n              params.date_start = params.date[0]\n              params.date_end = params.date[1]\n            } else {\n              params.date_start = params.date[0].format()\n              params.date_end = params.date[1].format()\n            }\n          }\n          delete params.date\n        }\n\n        if (params.logged_date) {\n          if (params.logged_date.length === 2) {\n            params.logged_date_start = params.logged_date[0].format()\n            params.logged_date_end = params.logged_date[1].format()\n          }\n          delete params.logged_date\n        }\n\n        // sort\n        params.order_by = this.orderBy\n        params.order_type = this.orderType\n\n        return params\n      },\n      selIds() {\n        let ids = []\n        let sels = this.$refs.table.selection\n        if (sels && sels.length > 0) {\n          sels.forEach(s => {\n            ids.push(s.id)\n          })\n        }\n        return ids\n      },\n      hasSel() {\n        return this.isReady && this.selIds.length > 0\n      }\n    },\n    methods: {\n      getData(init) {\n        if (init === true) {\n          this.page.current = 1\n        }\n\n        this.$api.get('/members', {params: this.params}).then(data => {\n          if (data) {\n            this.list = data.data\n            this.page.total = Number(data.total)\n          }\n        })\n      },\n      resetForm() {\n        this.check_username = false\n        this.form = Object.assign({}, this.$options.data().form)\n      },\n      del() {\n        this.$confirm(this.$t('member_del_confirm'), this.$t('del'), {\n          confirmButtonText: this.$t('btnYes'),\n          cancelButtonText: this.$t('btnNo'),\n          type: 'warning'\n        }).then(() => {\n          this.$api.delete('/members', {params: {ids: this.selIds}}).then(data => {\n            if (data) {\n              this.getData()\n              this.$message.success(this.$t('success'))\n            }\n          })\n        }).catch(() => {})\n      },\n      submit() {\n        if (this.form.id > 0) {\n          this.$api.put(`/members/${this.form.id}`, this.form).then(data => {\n            if (data) {\n              this.show.update = false\n              this.getData()\n            }\n          })\n        } else {\n          this.$api.post('/tokens/register', Object.assign(this.form, {password_confirmation: this.form.password})).then(data => {\n            if (data) {\n              this.show.update = false\n              this.getData(true)\n            }\n          })\n        }\n      },\n      changeAmount() {\n        this.$api.put(`/balances/${this.amountId}`, {amount: this.amount}).then(data => {\n          if (data) {\n            this.show.amount = false\n            this.getData(true)\n          }\n        })\n      },\n      edit(row) {\n        let form = {}\n        for (let i in this.form) {\n          if (this.form.hasOwnProperty(i) && row.hasOwnProperty(i)) {\n            form[i] = row[i]\n          }\n        }\n        this.form = form\n        this.show.update = true\n      },\n      check() {\n        let params = {username: this.form.username}\n        if (this.form.id > 0) {\n          params.id = this.form.id\n        }\n\n        this.$api.get('/tokens/check', {params}).then(data => {\n          if (data && data.check) {\n            this.check_username = true\n          }\n        })\n      },\n      toggleEnable({id, is_enabled}) {\n        this.$api.patch(`/members/${id}`, {is_enabled}).then(data => {\n          if (data) {\n            this.getData()\n          }\n        })\n      },\n      exports() {\n        global.location.href = process.env.VUE_APP_API_HOST + '/members/export?token=' + this.$store.state.token.token\n      },\n      clearChat() {\n        this.chat = {\n          id: 0,\n          name: '',\n          content: ''\n        }\n        this.chats = []\n      },\n      getChats(init) {\n        if (init === true) {\n          this.page2.current = 1\n        }\n\n        let params = {\n          per_page: this.page2.per_page,\n          page: this.page2.current,\n          member_id: this.chat.id\n        }\n\n        this.$api.get('/chats', {params}).then(data => {\n          if (data) {\n            this.chats = data.data\n            this.page2.total = Number(data.total)\n          }\n        })\n      },\n      openChat(row) {\n        this.chat.id = row.id\n        this.chat.name = row.nickname\n        this.show.chat = true\n        this.getChats(true)\n      },\n      chatSend() {\n        this.$api.post('/chats', {\n          member_id: this.chat.id,\n          content: this.chat.content\n        }).then(data => {\n          if (data) {\n            this.chat.content = ''\n            this.getChats(true)\n          }\n        })\n      },\n      sortChange({prop, order}) {\n        this.orderBy = prop || 'id'\n        this.orderType = order === 'ascending' ? 'asc' : 'desc';\n        this.getData(true)\n      }\n    },\n    watch: {\n      mem: {\n        handler(v) {\n          if (v.online !== false || v.date.length === 2) {\n            this.search = Object.assign(this.$options.data().search, v)\n            this.$store.commit('setMem', {online: false, date: []})\n            if (!this.isFirst) {\n              this.getData(true)\n            }\n          }\n          if (this.isFirst) {\n            this.getData(true)\n          }\n          this.isFirst = false\n        },\n        immediate: true\n      }\n    },\n    mounted() {\n      this.isReady = true\n      agents().then(data => {\n        if (data) {\n          this.agents = data\n        }\n      })\n    }\n  }\n</script>\n\n"]}]}