{"remainingRequest":"/www/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/www/web/src/views/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/www/web/src/views/Home.vue","mtime":1560668899000},{"path":"/www/web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/www/web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/www/web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport scene from '../components/scene'\nimport {mapState} from 'vuex'\nimport kx from '../kx'\n\nexport default {\n  name: 'home',\n  components: {scene},\n  data() {\n    return {\n      showDeposit: false,\n      showWithdrawal: false,\n      depositAmount: 0,\n      withdrawalAmount: 0,\n      rate: {\n        1: 0,\n        2: 0,\n        3: 0\n      },\n      prices: [],\n      account: {},\n      orders: [],\n      rates: [],\n      values: {},\n      pops: []\n    }\n  },\n  watch: {\n    rates: {\n      handler(rates) {\n        let datas = []\n        rates.forEach(({time, open, close, low, high}, index) => {\n          let value = [time, open, close, low, high]\n          if (index === 0) {\n            datas.unshift({\n              value,\n              itemStyle: {\n                borderWidth: 2,\n                borderColor: '#FD4322',\n                borderColor0: '#2F97E5'\n              },\n              emphasis: {\n                itemStyle: {\n                  borderWidth: 2,\n                  borderColor: '#18B387',\n                  borderColor0: '#20323E'\n                },\n              }\n            })\n          } else {\n            datas.unshift(value)\n          }\n        })\n        kx.setData(datas)\n      },\n      deep: true\n    },\n    forex: {\n      handler(data) {\n        if (this.rates.length === 0 || !data.time) {\n          return\n        }\n        let same = this.rates.some((rate, index) => {\n          if (data.time === rate.time) {\n            this.$set(this.rates, index, data)\n            return true\n          }\n        })\n\n        if (!same) {\n          this.getData()\n        }\n      },\n      deep: true\n    }\n  },\n  computed: {\n    ...mapState([\n      'forex',\n      'scenes',\n      'sleep',\n      'member'\n    ])\n  },\n  methods: {\n    getData() {\n      this.$api.get('/trades').then(data => {\n        if (data) {\n          if (this.forex.time !== '') {\n            data.rates.unshift(this.forex)\n          }\n          this.rates = data.rates\n          this.rate = data.config.rate\n          this.orders = data.orders\n          this.account = data.account\n\n          if (this.prices.slice().sort().toString() !== data.config.prices.slice().sort().toString()) {\n            this.prices = data.config.prices\n          }\n\n          this.values = data.values\n\n          // 更新账号余额\n          if (this.member && this.member.balance !== data.account.balance) {\n            let member = Object.assign({}, this.member)\n            member.balance = data.account.balance\n            this.$store.commit('saveMember', member)\n          }\n\n          if (data.notifies.length > 0) {\n            data.notifies.forEach(n => {\n              if (Number(n.status) === 2) {\n                this.$notify({\n                  title: this.$t('trade.win'),\n                  type: 'success',\n                  message: this.$t('trade.win_cont', [n.sn, n.amount]),\n                  duration: 0\n                })\n              } else {\n                this.$notify({\n                  title: this.$t('trade.lose'),\n                  type: 'error',\n                  message: this.$t('trade.lose_cont', [n.sn]),\n                  duration: 0\n                })\n              }\n            })\n          }\n        }\n      })\n    },\n    deposit() {\n      this.$api.post('/accounts/deposit', {amount: this.depositAmount}).then(data => {\n        if (data) {\n          this.showDeposit = false\n          this.$message.success(this.$t('base.success'))\n        }\n      })\n    },\n    withdrawal() {\n      this.$api.post('/accounts/withdrawal', {amount: this.withdrawalAmount}).then(data => {\n        if (data) {\n          this.getData()\n          this.showWithdrawal = false\n          this.$message.success(this.$t('base.success'))\n        }\n      })\n    }\n  },\n  mounted() {\n    kx.init(this.$refs.kxt)\n    this.getData()\n  }\n}\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"home\">\n    <div class=\"sleep\" v-show=\"sleep\">\n      <h1 v-t=\"'trade.sleep'\"></h1>\n      <div class=\"account\">\n        <div class=\"tt\" v-t=\"'trade.account'\"></div>\n        <div class=\"balance\">{{account.balance|numFormat}}</div>\n        <div class=\"btn\">\n          <button class=\"d\" @click=\"showDeposit = true\" v-t=\"'trade.deposit'\"></button>\n          <button @click=\"showWithdrawal = true\" v-t=\"'trade.withdrawal'\"></button>\n        </div>\n      </div>\n    </div>\n    <div class=\"right\">\n      <div class=\"account\">\n        <div class=\"tt\" v-t=\"'trade.account'\"></div>\n        <div class=\"balance\">{{account.balance|numFormat}}</div>\n        <div class=\"btn\">\n          <button class=\"d\" @click=\"showDeposit = true\" v-t=\"'trade.deposit'\"></button>\n          <button @click=\"showWithdrawal = true\" v-t=\"'trade.withdrawal'\"></button>\n        </div>\n      </div>\n      <transition-group name=\"list-complete\" tag=\"div\">\n        <scene\n            v-for=\"s in scenes\"\n            :key=\"s.timestamp\"\n            class=\"scene list-complete-item\"\n            :dt=\"s\"\n            :rate=\"rate\"\n            :prices=\"prices\"\n            :values=\"values[s.timestamp]\"\n            @trade=\"getData\"\n        ></scene>\n      </transition-group>\n    </div>\n    <div class=\"left\">\n      <div class=\"kx\" ref=\"kxt\"></div>\n      <div class=\"rate\">\n        <div class=\"tit\" v-t=\"'trade.fx'\"></div>\n        <p class=\"th\">\n          <span class=\"t\" v-t=\"'trade.time'\"></span>\n          <span v-t=\"'trade.open'\"></span>\n          <span v-t=\"'trade.high'\"></span>\n          <span v-t=\"'trade.low'\"></span>\n          <span v-t=\"'trade.close'\"></span>\n        </p>\n        <div class=\"td\">\n          <p v-for=\"r in rates\">\n            <span class=\"t\">{{r.time}}</span>\n            <span>{{r.open}}</span>\n            <span>{{r.high}}</span>\n            <span>{{r.low}}</span>\n            <span>{{r.close}}</span>\n          </p>\n        </div>\n      </div>\n      <div class=\"order\" v-if=\"orders.length > 0\">\n        <div class=\"tit\" v-t=\"'trade.jxz'\"></div>\n        <p class=\"th\">\n          <span class=\"t\" v-t=\"'trade.sn'\"></span>\n          <span class=\"m\" v-t=\"'trade.scene'\"></span>\n          <span class=\"r\" v-t=\"'trade.type'\"></span>\n          <span v-t=\"'trade.amount'\"></span>\n          <span class=\"r\" v-t=\"'trade.rate'\"></span>\n          <span v-t=\"'trade.shouyi'\"></span>\n          <span v-t=\"'trade.price'\"></span>\n        </p>\n        <p v-for=\"o in orders\">\n          <span class=\"t\">{{o.sn}}</span>\n          <span class=\"m s\">{{o.scene_time}}</span>\n          <span :class=\"`type_${o.type}`\" class=\"r\">{{o.type_label}}</span>\n          <span>{{o.amount}}</span>\n          <span class=\"r\">{{o.rate}}</span>\n          <span>{{o.amount * o.rate}}</span>\n          <span>{{o.open}}</span>\n        </p>\n      </div>\n    </div>\n    <el-dialog :title=\"$t('trade.deposit')\" :visible.sync=\"showDeposit\" custom-class=\"dialog-400\" @closed=\"depositAmount = 0\">\n      <el-form label-width=\"80px\">\n        <el-form-item :label=\"$t('trade.depositAmount')\">\n          <el-input v-model=\"depositAmount\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"showDeposit = false\" v-t=\"'base.btnNo'\"></el-button>\n        <el-button type=\"primary\" v-t=\"'base.btnYes'\" @click=\"deposit\"></el-button>\n      </div>\n    </el-dialog>\n    <el-dialog :title=\"$t('trade.withdrawal')\" :visible.sync=\"showWithdrawal\" custom-class=\"dialog-400\" @closed=\"withdrawalAmount = 0\">\n      <el-form label-width=\"80px\">\n        <el-form-item :label=\"$t('trade.withdrawalAmount')\">\n          <el-input v-model=\"withdrawalAmount\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"showWithdrawal = false\" v-t=\"'base.btnNo'\"></el-button>\n        <el-button type=\"primary\" v-t=\"'base.btnYes'\" @click=\"withdrawal\"></el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n  import scene from '../components/scene'\n  import {mapState} from 'vuex'\n  import kx from '../kx'\n\n  export default {\n    name: 'home',\n    components: {scene},\n    data() {\n      return {\n        showDeposit: false,\n        showWithdrawal: false,\n        depositAmount: 0,\n        withdrawalAmount: 0,\n        rate: {\n          1: 0,\n          2: 0,\n          3: 0\n        },\n        prices: [],\n        account: {},\n        orders: [],\n        rates: [],\n        values: {},\n        pops: []\n      }\n    },\n    watch: {\n      rates: {\n        handler(rates) {\n          let datas = []\n          rates.forEach(({time, open, close, low, high}, index) => {\n            let value = [time, open, close, low, high]\n            if (index === 0) {\n              datas.unshift({\n                value,\n                itemStyle: {\n                  borderWidth: 2,\n                  borderColor: '#FD4322',\n                  borderColor0: '#2F97E5'\n                },\n                emphasis: {\n                  itemStyle: {\n                    borderWidth: 2,\n                    borderColor: '#18B387',\n                    borderColor0: '#20323E'\n                  },\n                }\n              })\n            } else {\n              datas.unshift(value)\n            }\n          })\n          kx.setData(datas)\n        },\n        deep: true\n      },\n      forex: {\n        handler(data) {\n          if (this.rates.length === 0 || !data.time) {\n            return\n          }\n          let same = this.rates.some((rate, index) => {\n            if (data.time === rate.time) {\n              this.$set(this.rates, index, data)\n              return true\n            }\n          })\n\n          if (!same) {\n            this.getData()\n          }\n        },\n        deep: true\n      }\n    },\n    computed: {\n      ...mapState([\n        'forex',\n        'scenes',\n        'sleep',\n        'member'\n      ])\n    },\n    methods: {\n      getData() {\n        this.$api.get('/trades').then(data => {\n          if (data) {\n            if (this.forex.time !== '') {\n              data.rates.unshift(this.forex)\n            }\n            this.rates = data.rates\n            this.rate = data.config.rate\n            this.orders = data.orders\n            this.account = data.account\n\n            if (this.prices.slice().sort().toString() !== data.config.prices.slice().sort().toString()) {\n              this.prices = data.config.prices\n            }\n\n            this.values = data.values\n\n            // 更新账号余额\n            if (this.member && this.member.balance !== data.account.balance) {\n              let member = Object.assign({}, this.member)\n              member.balance = data.account.balance\n              this.$store.commit('saveMember', member)\n            }\n\n            if (data.notifies.length > 0) {\n              data.notifies.forEach(n => {\n                if (Number(n.status) === 2) {\n                  this.$notify({\n                    title: this.$t('trade.win'),\n                    type: 'success',\n                    message: this.$t('trade.win_cont', [n.sn, n.amount]),\n                    duration: 0\n                  })\n                } else {\n                  this.$notify({\n                    title: this.$t('trade.lose'),\n                    type: 'error',\n                    message: this.$t('trade.lose_cont', [n.sn]),\n                    duration: 0\n                  })\n                }\n              })\n            }\n          }\n        })\n      },\n      deposit() {\n        this.$api.post('/accounts/deposit', {amount: this.depositAmount}).then(data => {\n          if (data) {\n            this.showDeposit = false\n            this.$message.success(this.$t('base.success'))\n          }\n        })\n      },\n      withdrawal() {\n        this.$api.post('/accounts/withdrawal', {amount: this.withdrawalAmount}).then(data => {\n          if (data) {\n            this.getData()\n            this.showWithdrawal = false\n            this.$message.success(this.$t('base.success'))\n          }\n        })\n      }\n    },\n    mounted() {\n      kx.init(this.$refs.kxt)\n      this.getData()\n    }\n  }\n</script>\n\n<style scoped lang=\"less\">\n  @import \"../assets/home\";\n\n  .list-complete-item {\n    transition: all 1s;\n    display: block;\n  }\n\n  .list-complete-enter {\n    opacity: 0;\n    transform: translateY(346px);\n  }\n\n  .list-complete-leave-to {\n    opacity: 0;\n    transform: translateX(588px);\n  }\n\n  .list-complete-leave-active {\n    position: absolute;\n  }\n\n  @media screen and (max-width: 1200px) {\n    .list-complete-item {\n      transition: none;\n    }\n  }\n</style>"]}]}